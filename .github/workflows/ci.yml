name: Cleanic server CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
      - name: Build
        run: make build
      - name: Lint
        run: make lint
      - name: Unit tests
        run: make test
  integration-tests:
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:15
        env:
          POSTGRES_USER: cleanic
          POSTGRES_PASSWORD: cleanic
          POSTGRES_DB: cleanic
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
      - name: Wait for DB to be ready
        run: |
          echo "Waiting for Postgres to be ready..."
          sleep 10
      - name: Run integration tests
        env:
          DATABASE_URL: postgres://cleanic:cleanic@localhost:5432/cleanic?sslmode=disable
        run: make ci-integration
      - name: Upload logs artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: server-logs
          path: build/server.log
      - name: Upload to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: build/server.venom.cover.out
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  release:
    needs: [build, integration-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Release docker image with commit SHA
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          make release tag=$SHORT_SHA
