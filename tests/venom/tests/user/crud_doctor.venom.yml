name: Test - CRUD user
version: '2'

testcases:
  - name: reset db
    steps:
      - type: dbfixtures
        database: postgres
        dsn: "{{ .pgsql_dsn }}"
        migrations: ../../testData/schemas/
        folder: ../../testData/fixtures/user/doctor
        retry: 10
  - name: Login
    steps:
      - type: http
        method: POST
        url: "{{.url}}/auth/login"
        headers:
          Content-Type: application/json
        body: |
          {
            "email": "ad@gmail.com",
            "password": "123456"
          }
        assertions:
          - result.statuscode ShouldEqual 200
        vars:
          id10001RoleDoctorHeader:
            from: result.headers.Authorization
  - name: READ users
    steps:
      - type: http
        method: GET
        url: "{{.url}}/users"
        headers:
          Authorization: "{{.Login.id10001RoleDoctorHeader}}"
        assertions:
          - result.statuscode ShouldEqual 403
          - result.bodyjson ShouldHaveLength 1
          - |
            result.bodyjson.message ShouldEqual unauthorized resource: missing required roles: admin
      - type: http
        method: GET
        url: "{{.url}}/user/1234"
        headers:
          Authorization: "{{.Login.id10001RoleDoctorHeader}}"
        assertions:
          - result.statuscode ShouldEqual 403
          - result.bodyjson ShouldHaveLength 1
          - |
            result.bodyjson.message ShouldEqual unauthorized resource: missing required roles: admin
  - name: UPDATE user roles
    steps:
      - type: http
        method: PATCH
        url: "{{.url}}/user/roles"
        headers:
          Content-Type: application/json
          Authorization: "{{.Login.id10001RoleDoctorHeader}}"
        body: |
          {
            "id": 10001,
            "roles": "[admin]"
          }
        assertions:
          - result.statuscode ShouldEqual 403
          - result.bodyjson ShouldHaveLength 1
          - |
            result.bodyjson.message ShouldEqual unauthorized resource: missing required roles: admin
  - name: UPDATE user
    steps:
      - type: http
        method: PATCH
        url: "{{.url}}/user"
        headers:
          Content-Type: application/json
        body: |
          {
            "id": 10001,
            "email": "aa@gmail.com"
          }
        assertions:
          - result.statuscode ShouldEqual 401
          - result.bodyjson ShouldHaveLength 1
          - |
            result.bodyjson.message ShouldEqual unable to parse authorization header: empty token
      - type: http
        method: PATCH
        url: "{{.url}}/user"
        headers:
          Content-Type: application/json
          Authorization: "Bearer fake"
        body: |
          {
            "id": 10001,
            "email": "aa@gmail.com"
          }
        assertions:
          - result.statuscode ShouldEqual 401
          - result.bodyjson ShouldHaveLength 1
          - |
            result.bodyjson.message ShouldEqual unable to parse auth token: auth token not valid: token is malformed: token contains an invalid number of segments
      - type: http
        method: PATCH
        url: "{{.url}}/user"
        headers:
          Content-Type: application/json
          Authorization: "{{.Login.id10001RoleDoctorHeader}}"
        body: |
          {
            "id": 10001
          }
        assertions:
          - result.statuscode ShouldEqual 500
          - result.bodyjson ShouldHaveLength 1
          - |
            result.bodyjson.message ShouldEqual unable to update user: unable to update nothing on the user
      - type: http
        method: PATCH
        url: "{{.url}}/user"
        headers:
          Content-Type: application/json
          Authorization: "{{.Login.id10001RoleDoctorHeader}}"
        body: |
          {
            "id": 10001,
            "email": "addupdated@gmail.com"
          }
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson ShouldHaveLength 3
          - result.bodyjson.id ShouldEqual 10001
          - result.bodyjson.email ShouldEqual addupdated@gmail.com
          - result.bodyjson.roles ShouldEqual [doctor]
      - type: sql
        driver: postgres
        dsn: "{{ .pgsql_dsn }}"
        commands:
          - SELECT * FROM users WHERE id = '10001' ORDER BY id ASC;
        assertions:
          - result.queries.queries0.rows ShouldHaveLength 1
          - result.queries.queries0.rows.rows0 ShouldHaveLength 4
          - result.queries.queries0.rows.rows0.id ShouldEqual 10001
          - result.queries.queries0.rows.rows0.password ShouldHaveLength 60
          - result.queries.queries0.rows.rows0.email ShouldEqual addupdated@gmail.com
          - result.queries.queries0.rows.rows0.roles ShouldEqual ["doctor"]
  - name: DELETE a user
    steps:
      - type: http
        method: DELETE
        url: "{{.url}}/user/10002"
        headers:
          Authorization: "{{.Login.id10001RoleDoctorHeader}}"
        assertions:
          - result.statuscode ShouldEqual 500
          - result.bodyjson ShouldHaveLength 1
          - |
            result.bodyjson.message ShouldEqual unable to delete user: unauthorized to update another user
      - type: http
        method: DELETE
        url: "{{.url}}/user/10001"
        headers:
          Authorization: "{{.Login.id10001RoleDoctorHeader}}"
        assertions:
          - result.statuscode ShouldEqual 204
          - result.bodyjson ShouldHaveLength 0
  - name: Query final result in DB
    steps:
      - type: sql
        driver: postgres
        dsn: "{{ .pgsql_dsn }}"
        commands:
          - SELECT * FROM users ORDER BY id ASC;
        assertions:
          - result.queries.queries0.rows ShouldHaveLength 1
          - result.queries.queries0.rows.rows0 ShouldHaveLength 4
          - result.queries.queries0.rows.rows0.id ShouldEqual 10002
          - result.queries.queries0.rows.rows0.password ShouldHaveLength 60
          - result.queries.queries0.rows.rows0.email ShouldEqual cd@gmail.com
          - result.queries.queries0.rows.rows0.roles ShouldEqual ["doctor"]
